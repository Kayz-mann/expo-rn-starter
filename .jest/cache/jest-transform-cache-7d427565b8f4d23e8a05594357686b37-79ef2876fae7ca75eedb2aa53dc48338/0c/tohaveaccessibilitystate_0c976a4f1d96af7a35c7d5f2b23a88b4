73b470d0e6d8f9522acf3d62dc4ee66e
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toHaveAccessibilityState = void 0;
var jest_matcher_utils_1 = require("jest-matcher-utils");
var utils_1 = require("./utils");
function toHaveAccessibilityState(element, expectedState) {
  var _this = this;
  (0, utils_1.checkReactElement)(element, toHaveAccessibilityState, this);
  var impliedState = getAccessibilityState(element);
  return {
    pass: matchAccessibilityState(element, expectedState),
    message: function message() {
      var matcher = (0, jest_matcher_utils_1.matcherHint)(`${_this.isNot ? '.not' : ''}.toHaveAccessibilityState`, 'element', (0, jest_matcher_utils_1.stringify)(expectedState));
      return (0, utils_1.getMessage)(matcher, `Expected the element ${_this.isNot ? 'not to' : 'to'} have accessibility state`, (0, jest_matcher_utils_1.stringify)(expectedState), 'Received element with implied accessibility state', (0, jest_matcher_utils_1.stringify)(impliedState));
    }
  };
}
exports.toHaveAccessibilityState = toHaveAccessibilityState;
var defaultState = {
  disabled: false,
  selected: false,
  busy: false
};
var getAccessibilityState = function getAccessibilityState(element) {
  return _objectSpread(_objectSpread({}, defaultState), element.props.accessibilityState);
};
var accessibilityStateKeys = ['disabled', 'selected', 'checked', 'busy', 'expanded'];
function matchAccessibilityState(element, matcher) {
  var state = getAccessibilityState(element);
  return accessibilityStateKeys.every(function (key) {
    return matchStateEntry(state, matcher, key);
  });
}
function matchStateEntry(state, matcher, key) {
  return matcher[key] === undefined || matcher[key] === state[key];
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9kZWZpbmVQcm9wZXJ0eTIiLCJvd25LZXlzIiwiZSIsInIiLCJ0IiwiT2JqZWN0Iiwia2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsIm8iLCJmaWx0ZXIiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwicHVzaCIsImFwcGx5IiwiX29iamVjdFNwcmVhZCIsImFyZ3VtZW50cyIsImxlbmd0aCIsImZvckVhY2giLCJkZWZhdWx0IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInRvSGF2ZUFjY2Vzc2liaWxpdHlTdGF0ZSIsImplc3RfbWF0Y2hlcl91dGlsc18xIiwidXRpbHNfMSIsImVsZW1lbnQiLCJleHBlY3RlZFN0YXRlIiwiX3RoaXMiLCJjaGVja1JlYWN0RWxlbWVudCIsImltcGxpZWRTdGF0ZSIsImdldEFjY2Vzc2liaWxpdHlTdGF0ZSIsInBhc3MiLCJtYXRjaEFjY2Vzc2liaWxpdHlTdGF0ZSIsIm1lc3NhZ2UiLCJtYXRjaGVyIiwibWF0Y2hlckhpbnQiLCJpc05vdCIsInN0cmluZ2lmeSIsImdldE1lc3NhZ2UiLCJkZWZhdWx0U3RhdGUiLCJkaXNhYmxlZCIsInNlbGVjdGVkIiwiYnVzeSIsInByb3BzIiwiYWNjZXNzaWJpbGl0eVN0YXRlIiwiYWNjZXNzaWJpbGl0eVN0YXRlS2V5cyIsInN0YXRlIiwiZXZlcnkiLCJrZXkiLCJtYXRjaFN0YXRlRW50cnkiLCJ1bmRlZmluZWQiXSwic291cmNlcyI6WyJ0by1oYXZlLWFjY2Vzc2liaWxpdHktc3RhdGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnRvSGF2ZUFjY2Vzc2liaWxpdHlTdGF0ZSA9IHZvaWQgMDtcbmNvbnN0IGplc3RfbWF0Y2hlcl91dGlsc18xID0gcmVxdWlyZShcImplc3QtbWF0Y2hlci11dGlsc1wiKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcbmZ1bmN0aW9uIHRvSGF2ZUFjY2Vzc2liaWxpdHlTdGF0ZShlbGVtZW50LCBleHBlY3RlZFN0YXRlKSB7XG4gICAgKDAsIHV0aWxzXzEuY2hlY2tSZWFjdEVsZW1lbnQpKGVsZW1lbnQsIHRvSGF2ZUFjY2Vzc2liaWxpdHlTdGF0ZSwgdGhpcyk7XG4gICAgY29uc3QgaW1wbGllZFN0YXRlID0gZ2V0QWNjZXNzaWJpbGl0eVN0YXRlKGVsZW1lbnQpO1xuICAgIHJldHVybiB7XG4gICAgICAgIHBhc3M6IG1hdGNoQWNjZXNzaWJpbGl0eVN0YXRlKGVsZW1lbnQsIGV4cGVjdGVkU3RhdGUpLFxuICAgICAgICBtZXNzYWdlOiAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBtYXRjaGVyID0gKDAsIGplc3RfbWF0Y2hlcl91dGlsc18xLm1hdGNoZXJIaW50KShgJHt0aGlzLmlzTm90ID8gJy5ub3QnIDogJyd9LnRvSGF2ZUFjY2Vzc2liaWxpdHlTdGF0ZWAsICdlbGVtZW50JywgKDAsIGplc3RfbWF0Y2hlcl91dGlsc18xLnN0cmluZ2lmeSkoZXhwZWN0ZWRTdGF0ZSkpO1xuICAgICAgICAgICAgcmV0dXJuICgwLCB1dGlsc18xLmdldE1lc3NhZ2UpKG1hdGNoZXIsIGBFeHBlY3RlZCB0aGUgZWxlbWVudCAke3RoaXMuaXNOb3QgPyAnbm90IHRvJyA6ICd0byd9IGhhdmUgYWNjZXNzaWJpbGl0eSBzdGF0ZWAsICgwLCBqZXN0X21hdGNoZXJfdXRpbHNfMS5zdHJpbmdpZnkpKGV4cGVjdGVkU3RhdGUpLCAnUmVjZWl2ZWQgZWxlbWVudCB3aXRoIGltcGxpZWQgYWNjZXNzaWJpbGl0eSBzdGF0ZScsICgwLCBqZXN0X21hdGNoZXJfdXRpbHNfMS5zdHJpbmdpZnkpKGltcGxpZWRTdGF0ZSkpO1xuICAgICAgICB9LFxuICAgIH07XG59XG5leHBvcnRzLnRvSGF2ZUFjY2Vzc2liaWxpdHlTdGF0ZSA9IHRvSGF2ZUFjY2Vzc2liaWxpdHlTdGF0ZTtcbi8qKlxuICogRGVmYXVsdCBhY2Nlc3NpYmlsaXR5IHN0YXRlIHZhbHVlcyBiYXNlZCBvbiBleHBlcmltZW50cyB1c2luZyBhY2Nlc3NpYmlsaXR5XG4gKiBpbnNwZWN0b3Ivc2NyZWVuIHJlYWRlciBvbiBpT1MgYW5kIEFuZHJvaWQuXG4gKlxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vY2FsbHN0YWNrL3JlYWN0LW5hdGl2ZS10ZXN0aW5nLWxpYnJhcnkvd2lraS9BY2Nlc3NpYmlsaXR5Oi1TdGF0ZVxuICovXG5jb25zdCBkZWZhdWx0U3RhdGUgPSB7XG4gICAgZGlzYWJsZWQ6IGZhbHNlLFxuICAgIHNlbGVjdGVkOiBmYWxzZSxcbiAgICBidXN5OiBmYWxzZSxcbn07XG5jb25zdCBnZXRBY2Nlc3NpYmlsaXR5U3RhdGUgPSAoZWxlbWVudCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAgIC4uLmRlZmF1bHRTdGF0ZSxcbiAgICAgICAgLi4uZWxlbWVudC5wcm9wcy5hY2Nlc3NpYmlsaXR5U3RhdGUsXG4gICAgfTtcbn07XG5jb25zdCBhY2Nlc3NpYmlsaXR5U3RhdGVLZXlzID0gW1xuICAgICdkaXNhYmxlZCcsXG4gICAgJ3NlbGVjdGVkJyxcbiAgICAnY2hlY2tlZCcsXG4gICAgJ2J1c3knLFxuICAgICdleHBhbmRlZCcsXG5dO1xuZnVuY3Rpb24gbWF0Y2hBY2Nlc3NpYmlsaXR5U3RhdGUoZWxlbWVudCwgbWF0Y2hlcikge1xuICAgIGNvbnN0IHN0YXRlID0gZ2V0QWNjZXNzaWJpbGl0eVN0YXRlKGVsZW1lbnQpO1xuICAgIHJldHVybiBhY2Nlc3NpYmlsaXR5U3RhdGVLZXlzLmV2ZXJ5KChrZXkpID0+IG1hdGNoU3RhdGVFbnRyeShzdGF0ZSwgbWF0Y2hlciwga2V5KSk7XG59XG5mdW5jdGlvbiBtYXRjaFN0YXRlRW50cnkoc3RhdGUsIG1hdGNoZXIsIGtleSkge1xuICAgIHJldHVybiBtYXRjaGVyW2tleV0gPT09IHVuZGVmaW5lZCB8fCBtYXRjaGVyW2tleV0gPT09IHN0YXRlW2tleV07XG59XG4iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBQUMsSUFBQUEsc0JBQUEsR0FBQUMsT0FBQTtBQUFBLElBQUFDLGdCQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFBQSxTQUFBRSxRQUFBQyxDQUFBLEVBQUFDLENBQUEsUUFBQUMsQ0FBQSxHQUFBQyxNQUFBLENBQUFDLElBQUEsQ0FBQUosQ0FBQSxPQUFBRyxNQUFBLENBQUFFLHFCQUFBLFFBQUFDLENBQUEsR0FBQUgsTUFBQSxDQUFBRSxxQkFBQSxDQUFBTCxDQUFBLEdBQUFDLENBQUEsS0FBQUssQ0FBQSxHQUFBQSxDQUFBLENBQUFDLE1BQUEsV0FBQU4sQ0FBQSxXQUFBRSxNQUFBLENBQUFLLHdCQUFBLENBQUFSLENBQUEsRUFBQUMsQ0FBQSxFQUFBUSxVQUFBLE9BQUFQLENBQUEsQ0FBQVEsSUFBQSxDQUFBQyxLQUFBLENBQUFULENBQUEsRUFBQUksQ0FBQSxZQUFBSixDQUFBO0FBQUEsU0FBQVUsY0FBQVosQ0FBQSxhQUFBQyxDQUFBLE1BQUFBLENBQUEsR0FBQVksU0FBQSxDQUFBQyxNQUFBLEVBQUFiLENBQUEsVUFBQUMsQ0FBQSxXQUFBVyxTQUFBLENBQUFaLENBQUEsSUFBQVksU0FBQSxDQUFBWixDQUFBLFFBQUFBLENBQUEsT0FBQUYsT0FBQSxDQUFBSSxNQUFBLENBQUFELENBQUEsT0FBQWEsT0FBQSxXQUFBZCxDQUFBLFFBQUFILGdCQUFBLENBQUFrQixPQUFBLEVBQUFoQixDQUFBLEVBQUFDLENBQUEsRUFBQUMsQ0FBQSxDQUFBRCxDQUFBLFNBQUFFLE1BQUEsQ0FBQWMseUJBQUEsR0FBQWQsTUFBQSxDQUFBZSxnQkFBQSxDQUFBbEIsQ0FBQSxFQUFBRyxNQUFBLENBQUFjLHlCQUFBLENBQUFmLENBQUEsS0FBQUgsT0FBQSxD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
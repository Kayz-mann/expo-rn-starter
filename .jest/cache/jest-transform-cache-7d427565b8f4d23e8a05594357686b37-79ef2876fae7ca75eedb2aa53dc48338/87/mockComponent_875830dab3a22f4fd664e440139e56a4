a6636fdcc35302113a696815ddc3cd38
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 */

'use strict';

module.exports = (moduleName, instanceMethods, isESModule) => {
  const RealComponent = isESModule ? jest.requireActual(moduleName).default : jest.requireActual(moduleName);
  const React = require('react');
  const SuperClass = typeof RealComponent === 'function' ? RealComponent : React.Component;
  const name = RealComponent.displayName || RealComponent.name || (RealComponent.render // handle React.forwardRef
  ? RealComponent.render.displayName || RealComponent.render.name : 'Unknown');
  const nameWithoutPrefix = name.replace(/^(RCT|RK)/, '');
  const Component = class extends SuperClass {
    static displayName = 'Component';
    render() {
      const props = Object.assign({}, RealComponent.defaultProps);
      if (this.props) {
        Object.keys(this.props).forEach(prop => {
          // We can't just assign props on top of defaultProps
          // because React treats undefined as special and different from null.
          // If a prop is specified but set to undefined it is ignored and the
          // default prop is used instead. If it is set to null, then the
          // null value overwrites the default value.
          if (this.props[prop] !== undefined) {
            props[prop] = this.props[prop];
          }
        });
      }
      return React.createElement(nameWithoutPrefix, props, this.props.children);
    }
  };
  Component.displayName = nameWithoutPrefix;
  Object.keys(RealComponent).forEach(classStatic => {
    Component[classStatic] = RealComponent[classStatic];
  });
  if (instanceMethods != null) {
    Object.assign(Component.prototype, instanceMethods);
  }
  return Component;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwibW9kdWxlTmFtZSIsImluc3RhbmNlTWV0aG9kcyIsImlzRVNNb2R1bGUiLCJSZWFsQ29tcG9uZW50IiwiamVzdCIsInJlcXVpcmVBY3R1YWwiLCJkZWZhdWx0IiwiUmVhY3QiLCJyZXF1aXJlIiwiU3VwZXJDbGFzcyIsIkNvbXBvbmVudCIsIm5hbWUiLCJkaXNwbGF5TmFtZSIsInJlbmRlciIsIm5hbWVXaXRob3V0UHJlZml4IiwicmVwbGFjZSIsInByb3BzIiwiT2JqZWN0IiwiYXNzaWduIiwiZGVmYXVsdFByb3BzIiwia2V5cyIsImZvckVhY2giLCJwcm9wIiwidW5kZWZpbmVkIiwiY3JlYXRlRWxlbWVudCIsImNoaWxkcmVuIiwiY2xhc3NTdGF0aWMiLCJwcm90b3R5cGUiXSwic291cmNlcyI6WyJtb2NrQ29tcG9uZW50LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChtb2R1bGVOYW1lLCBpbnN0YW5jZU1ldGhvZHMsIGlzRVNNb2R1bGUpID0+IHtcbiAgY29uc3QgUmVhbENvbXBvbmVudCA9IGlzRVNNb2R1bGVcbiAgICA/IGplc3QucmVxdWlyZUFjdHVhbChtb2R1bGVOYW1lKS5kZWZhdWx0XG4gICAgOiBqZXN0LnJlcXVpcmVBY3R1YWwobW9kdWxlTmFtZSk7XG4gIGNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxuICBjb25zdCBTdXBlckNsYXNzID1cbiAgICB0eXBlb2YgUmVhbENvbXBvbmVudCA9PT0gJ2Z1bmN0aW9uJyA/IFJlYWxDb21wb25lbnQgOiBSZWFjdC5Db21wb25lbnQ7XG5cbiAgY29uc3QgbmFtZSA9XG4gICAgUmVhbENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fFxuICAgIFJlYWxDb21wb25lbnQubmFtZSB8fFxuICAgIChSZWFsQ29tcG9uZW50LnJlbmRlciAvLyBoYW5kbGUgUmVhY3QuZm9yd2FyZFJlZlxuICAgICAgPyBSZWFsQ29tcG9uZW50LnJlbmRlci5kaXNwbGF5TmFtZSB8fCBSZWFsQ29tcG9uZW50LnJlbmRlci5uYW1lXG4gICAgICA6ICdVbmtub3duJyk7XG5cbiAgY29uc3QgbmFtZVdpdGhvdXRQcmVmaXggPSBuYW1lLnJlcGxhY2UoL14oUkNUfFJLKS8sICcnKTtcblxuICBjb25zdCBDb21wb25lbnQgPSBjbGFzcyBleHRlbmRzIFN1cGVyQ2xhc3Mge1xuICAgIHN0YXRpYyBkaXNwbGF5TmFtZSA9ICdDb21wb25lbnQnO1xuXG4gICAgcmVuZGVyKCkge1xuICAgICAgY29uc3QgcHJvcHMgPSBPYmplY3QuYXNzaWduKHt9LCBSZWFsQ29tcG9uZW50LmRlZmF1bHRQcm9wcyk7XG5cbiAgICAgIGlmICh0aGlzLnByb3BzKSB7XG4gICAgICAgIE9iamVjdC5rZXlzKHRoaXMucHJvcHMpLmZvckVhY2gocHJvcCA9PiB7XG4gICAgICAgICAgLy8gV2UgY2FuJ3QganVzdCBhc3NpZ24gcHJvcHMgb24gdG9wIG9mIGRlZmF1bHRQcm9wc1xuICAgICAgICAgIC8vIGJlY2F1c2UgUmVhY3QgdHJlYXRzIHVuZGVmaW5lZCBhcyBzcGVjaWFsIGFuZCBkaWZmZXJlbnQgZnJvbSBudWxsLlxuICAgICAgICAgIC8vIElmIGEgcHJvcCBpcyBzcGVjaWZpZWQgYnV0IHNldCB0byB1bmRlZmluZWQgaXQgaXMgaWdub3JlZCBhbmQgdGhlXG4gICAgICAgICAgLy8gZGVmYXVsdCBwcm9wIGlzIHVzZWQgaW5zdGVhZC4gSWYgaXQgaXMgc2V0IHRvIG51bGwsIHRoZW4gdGhlXG4gICAgICAgICAgLy8gbnVsbCB2YWx1ZSBvdmVyd3JpdGVzIHRoZSBkZWZhdWx0IHZhbHVlLlxuICAgICAgICAgIGlmICh0aGlzLnByb3BzW3Byb3BdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHByb3BzW3Byb3BdID0gdGhpcy5wcm9wc1twcm9wXTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChuYW1lV2l0aG91dFByZWZpeCwgcHJvcHMsIHRoaXMucHJvcHMuY2hpbGRyZW4pO1xuICAgIH1cbiAgfTtcblxuICBDb21wb25lbnQuZGlzcGxheU5hbWUgPSBuYW1lV2l0aG91dFByZWZpeDtcblxuICBPYmplY3Qua2V5cyhSZWFsQ29tcG9uZW50KS5mb3JFYWNoKGNsYXNzU3RhdGljID0+IHtcbiAgICBDb21wb25lbnRbY2xhc3NTdGF0aWNdID0gUmVhbENvbXBvbmVudFtjbGFzc1N0YXRpY107XG4gIH0pO1xuXG4gIGlmIChpbnN0YW5jZU1ldGhvZHMgIT0gbnVsbCkge1xuICAgIE9iamVjdC5hc3NpZ24oQ29tcG9uZW50LnByb3RvdHlwZSwgaW5zdGFuY2VNZXRob2RzKTtcbiAgfVxuXG4gIHJldHVybiBDb21wb25lbnQ7XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFlBQVk7O0FBRVpBLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHLENBQUNDLFVBQVUsRUFBRUMsZUFBZSxFQUFFQyxVQUFVLEtBQUs7RUFDNUQsTUFBTUMsYUFBYSxHQUFHRCxVQUFVLEdBQzVCRSxJQUFJLENBQUNDLGFBQWEsQ0FBQ0wsVUFBVSxDQUFDLENBQUNNLE9BQU8sR0FDdENGLElBQUksQ0FBQ0MsYUFBYSxDQUFDTCxVQUFVLENBQUM7RUFDbEMsTUFBTU8sS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBTyxDQUFDO0VBRTlCLE1BQU1DLFVBQVUsR0FDZCxPQUFPTixhQUFhLEtBQUssVUFBVSxHQUFHQSxhQUFhLEdBQUdJLEtBQUssQ0FBQ0csU0FBUztFQUV2RSxNQUFNQyxJQUFJLEdBQ1JSLGFBQWEsQ0FBQ1MsV0FBVyxJQUN6QlQsYUFBYSxDQUFDUSxJQUFJLEtBQ2pCUixhQUFhLENBQUNVLE1BQU0sQ0FBQztFQUFBLEVBQ2xCVixhQUFhLENBQUNVLE1BQU0sQ0FBQ0QsV0FBVyxJQUFJVCxhQUFhLENBQUNVLE1BQU0sQ0FBQ0YsSUFBSSxHQUM3RCxTQUFTLENBQUM7RUFFaEIsTUFBTUcsaUJBQWlCLEdBQUdILElBQUksQ0FBQ0ksT0FBTyxDQUFDLFdBQVcsRUFBRSxFQUFFLENBQUM7RUFFdkQsTUFBTUwsU0FBUyxHQUFHLGNBQWNELFVBQVUsQ0FBQztJQUN6QyxPQUFPRyxXQUFXLEdBQUcsV0FBVztJQUVoQ0MsTUFBTUEsQ0FBQSxFQUFHO01BQ1AsTUFBTUcsS0FBSyxHQUFHQyxNQUFNLENBQUNDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRWYsYUFBYSxDQUFDZ0IsWUFBWSxDQUFDO01BRTNELElBQUksSUFBSSxDQUFDSCxLQUFLLEVBQUU7UUFDZEMsTUFBTSxDQUFDRyxJQUFJLENBQUMsSUFBSSxDQUFDSixLQUFLLENBQUMsQ0FBQ0ssT0FBTyxDQUFDQyxJQUFJLElBQUk7VUFDdEM7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBLElBQUksSUFBSSxDQUFDTixLQUFLLENBQUNNLElBQUksQ0FBQyxLQUFLQyxTQUFTLEVBQUU7WUFDbENQLEtBQUssQ0FBQ00sSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDTixLQUFLLENBQUNNLElBQUksQ0FBQztVQUNoQztRQUNGLENBQUMsQ0FBQztNQUNKO01BRUEsT0FBT2YsS0FBSyxDQUFDaUIsYUFBYSxDQUFDVixpQkFBaUIsRUFBRUUsS0FBSyxFQUFFLElBQUksQ0FBQ0EsS0FBSyxDQUFDUyxRQUFRLENBQUM7SUFDM0U7RUFDRixDQUFDO0VBRURmLFNBQVMsQ0FBQ0UsV0FBVyxHQUFHRSxpQkFBaUI7RUFFekNHLE1BQU0sQ0FBQ0csSUFBSSxDQUFDakIsYUFBYSxDQUFDLENBQUNrQixPQUFPLENBQUNLLFdBQVcsSUFBSTtJQUNoRGhCLFNBQVMsQ0FBQ2dCLFdBQVcsQ0FBQyxHQUFHdkIsYUFBYSxDQUFDdUIsV0FBVyxDQUFDO0VBQ3JELENBQUMsQ0FBQztFQUVGLElBQUl6QixlQUFlLElBQUksSUFBSSxFQUFFO0lBQzNCZ0IsTUFBTSxDQUFDQyxNQUFNLENBQUNSLFNBQVMsQ0FBQ2lCLFNBQVMsRUFBRTFCLGVBQWUsQ0FBQztFQUNyRDtFQUVBLE9BQU9TLFNBQVM7QUFDbEIsQ0FBQyJ9